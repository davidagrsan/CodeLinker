#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CodeLinker
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CodeLinker")]
	public partial class DBConnectionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertProgrammingLanguage(ProgrammingLanguage instance);
    partial void UpdateProgrammingLanguage(ProgrammingLanguage instance);
    partial void DeleteProgrammingLanguage(ProgrammingLanguage instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectCategory(ProjectCategory instance);
    partial void UpdateProjectCategory(ProjectCategory instance);
    partial void DeleteProjectCategory(ProjectCategory instance);
    partial void InsertProjectType(ProjectType instance);
    partial void UpdateProjectType(ProjectType instance);
    partial void DeleteProjectType(ProjectType instance);
    partial void InsertSpeciality(Speciality instance);
    partial void UpdateSpeciality(Speciality instance);
    partial void DeleteSpeciality(Speciality instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserKnowsLanguage(UserKnowsLanguage instance);
    partial void UpdateUserKnowsLanguage(UserKnowsLanguage instance);
    partial void DeleteUserKnowsLanguage(UserKnowsLanguage instance);
    partial void InsertUserLikesProject(UserLikesProject instance);
    partial void UpdateUserLikesProject(UserLikesProject instance);
    partial void DeleteUserLikesProject(UserLikesProject instance);
    partial void InsertUserParticipatesProject(UserParticipatesProject instance);
    partial void UpdateUserParticipatesProject(UserParticipatesProject instance);
    partial void DeleteUserParticipatesProject(UserParticipatesProject instance);
    partial void InsertUserReviewsProject(UserReviewsProject instance);
    partial void UpdateUserReviewsProject(UserReviewsProject instance);
    partial void DeleteUserReviewsProject(UserReviewsProject instance);
        #endregion

        public DBConnectionDataContext() :
base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CodeLinkerConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public DBConnectionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBConnectionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBConnectionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBConnectionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ProgrammingLanguage> ProgrammingLanguage
		{
			get
			{
				return this.GetTable<ProgrammingLanguage>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserType
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
		
		public System.Data.Linq.Table<Project> Project
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectCategory> ProjectCategory
		{
			get
			{
				return this.GetTable<ProjectCategory>();
			}
		}
		
		public System.Data.Linq.Table<ProjectType> ProjectType
		{
			get
			{
				return this.GetTable<ProjectType>();
			}
		}
		
		public System.Data.Linq.Table<Speciality> Speciality
		{
			get
			{
				return this.GetTable<Speciality>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserKnowsLanguage> UserKnowsLanguage
		{
			get
			{
				return this.GetTable<UserKnowsLanguage>();
			}
		}
		
		public System.Data.Linq.Table<UserLikesProject> UserLikesProject
		{
			get
			{
				return this.GetTable<UserLikesProject>();
			}
		}
		
		public System.Data.Linq.Table<UserParticipatesProject> UserParticipatesProject
		{
			get
			{
				return this.GetTable<UserParticipatesProject>();
			}
		}
		
		public System.Data.Linq.Table<UserReviewsProject> UserReviewsProject
		{
			get
			{
				return this.GetTable<UserReviewsProject>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProgrammingLanguage")]
	public partial class ProgrammingLanguage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageId;
		
		private string _LanguageName;
		
		private EntitySet<Project> _Project;
		
		private EntitySet<Project> _Project1;
		
		private EntitySet<UserKnowsLanguage> _UserKnowsLanguage;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageIdChanging(int value);
    partial void OnLanguageIdChanged();
    partial void OnLanguageNameChanging(string value);
    partial void OnLanguageNameChanged();
    #endregion
		
		public ProgrammingLanguage()
		{
			this._Project = new EntitySet<Project>(new Action<Project>(this.attach_Project), new Action<Project>(this.detach_Project));
			this._Project1 = new EntitySet<Project>(new Action<Project>(this.attach_Project1), new Action<Project>(this.detach_Project1));
			this._UserKnowsLanguage = new EntitySet<UserKnowsLanguage>(new Action<UserKnowsLanguage>(this.attach_UserKnowsLanguage), new Action<UserKnowsLanguage>(this.detach_UserKnowsLanguage));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageName", DbType="VarChar(40)")]
		public string LanguageName
		{
			get
			{
				return this._LanguageName;
			}
			set
			{
				if ((this._LanguageName != value))
				{
					this.OnLanguageNameChanging(value);
					this.SendPropertyChanging();
					this._LanguageName = value;
					this.SendPropertyChanged("LanguageName");
					this.OnLanguageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgrammingLanguage_Project", Storage="_Project", ThisKey="LanguageId", OtherKey="Mainlanguage")]
		public EntitySet<Project> Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				this._Project.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgrammingLanguage_Project1", Storage="_Project1", ThisKey="LanguageId", OtherKey="SecondaryLanguage")]
		public EntitySet<Project> Project1
		{
			get
			{
				return this._Project1;
			}
			set
			{
				this._Project1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgrammingLanguage_UserKnowsLanguage", Storage="_UserKnowsLanguage", ThisKey="LanguageId", OtherKey="LanguageFK")]
		public EntitySet<UserKnowsLanguage> UserKnowsLanguage
		{
			get
			{
				return this._UserKnowsLanguage;
			}
			set
			{
				this._UserKnowsLanguage.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProgrammingLanguage = this;
		}
		
		private void detach_Project(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProgrammingLanguage = null;
		}
		
		private void attach_Project1(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProgrammingLanguage1 = this;
		}
		
		private void detach_Project1(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProgrammingLanguage1 = null;
		}
		
		private void attach_UserKnowsLanguage(UserKnowsLanguage entity)
		{
			this.SendPropertyChanging();
			entity.ProgrammingLanguage = this;
		}
		
		private void detach_UserKnowsLanguage(UserKnowsLanguage entity)
		{
			this.SendPropertyChanging();
			entity.ProgrammingLanguage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserType")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserTypeId;
		
		private string _TypeName;
		
		private EntitySet<User> _User;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserTypeIdChanging(int value);
    partial void OnUserTypeIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public UserType()
		{
			this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserTypeId
		{
			get
			{
				return this._UserTypeId;
			}
			set
			{
				if ((this._UserTypeId != value))
				{
					this.OnUserTypeIdChanging(value);
					this.SendPropertyChanging();
					this._UserTypeId = value;
					this.SendPropertyChanged("UserTypeId");
					this.OnUserTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(20)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_User", ThisKey="UserTypeId", OtherKey="UserTypeFK")]
		public EntitySet<User> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectId;
		
		private string _ProjectName;
		
		private string _ShortDescription;
		
		private string _FullDescription;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _DeliveryDate;
		
		private int _MaxUsers;
		
		private bool _Finalized;
		
		private bool _Open;
		
		private string _GithubURL;
		
		private int _PropietaryId;
		
		private int _Mainlanguage;
		
		private System.Nullable<int> _SecondaryLanguage;
		
		private int _ProjectTypeFK;
		
		private int _ProjectCategoryFK;
		
		private string _CommunicationMethod;
		
		private EntitySet<UserLikesProject> _UserLikesProject;
		
		private EntitySet<UserParticipatesProject> _UserParticipatesProject;
		
		private EntitySet<UserReviewsProject> _UserReviewsProject;
		
		private EntityRef<ProgrammingLanguage> _ProgrammingLanguage;
		
		private EntityRef<ProgrammingLanguage> _ProgrammingLanguage1;
		
		private EntityRef<ProjectCategory> _ProjectCategory;
		
		private EntityRef<ProjectType> _ProjectType;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIdChanging(int value);
    partial void OnProjectIdChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnShortDescriptionChanging(string value);
    partial void OnShortDescriptionChanged();
    partial void OnFullDescriptionChanging(string value);
    partial void OnFullDescriptionChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnDeliveryDateChanging(System.DateTime value);
    partial void OnDeliveryDateChanged();
    partial void OnMaxUsersChanging(int value);
    partial void OnMaxUsersChanged();
    partial void OnFinalizedChanging(bool value);
    partial void OnFinalizedChanged();
    partial void OnOpenChanging(bool value);
    partial void OnOpenChanged();
    partial void OnGithubURLChanging(string value);
    partial void OnGithubURLChanged();
    partial void OnPropietaryIdChanging(int value);
    partial void OnPropietaryIdChanged();
    partial void OnMainlanguageChanging(int value);
    partial void OnMainlanguageChanged();
    partial void OnSecondaryLanguageChanging(System.Nullable<int> value);
    partial void OnSecondaryLanguageChanged();
    partial void OnProjectTypeFKChanging(int value);
    partial void OnProjectTypeFKChanged();
    partial void OnProjectCategoryFKChanging(int value);
    partial void OnProjectCategoryFKChanged();
    partial void OnCommunicationMethodChanging(string value);
    partial void OnCommunicationMethodChanged();
    #endregion
		
		public Project()
		{
			this._UserLikesProject = new EntitySet<UserLikesProject>(new Action<UserLikesProject>(this.attach_UserLikesProject), new Action<UserLikesProject>(this.detach_UserLikesProject));
			this._UserParticipatesProject = new EntitySet<UserParticipatesProject>(new Action<UserParticipatesProject>(this.attach_UserParticipatesProject), new Action<UserParticipatesProject>(this.detach_UserParticipatesProject));
			this._UserReviewsProject = new EntitySet<UserReviewsProject>(new Action<UserReviewsProject>(this.attach_UserReviewsProject), new Action<UserReviewsProject>(this.detach_UserReviewsProject));
			this._ProgrammingLanguage = default(EntityRef<ProgrammingLanguage>);
			this._ProgrammingLanguage1 = default(EntityRef<ProgrammingLanguage>);
			this._ProjectCategory = default(EntityRef<ProjectCategory>);
			this._ProjectType = default(EntityRef<ProjectType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectId
		{
			get
			{
				return this._ProjectId;
			}
			set
			{
				if ((this._ProjectId != value))
				{
					this.OnProjectIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectId = value;
					this.SendPropertyChanged("ProjectId");
					this.OnProjectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortDescription", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string ShortDescription
		{
			get
			{
				return this._ShortDescription;
			}
			set
			{
				if ((this._ShortDescription != value))
				{
					this.OnShortDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ShortDescription = value;
					this.SendPropertyChanged("ShortDescription");
					this.OnShortDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullDescription", DbType="VarChar(1500) NOT NULL", CanBeNull=false)]
		public string FullDescription
		{
			get
			{
				return this._FullDescription;
			}
			set
			{
				if ((this._FullDescription != value))
				{
					this.OnFullDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FullDescription = value;
					this.SendPropertyChanged("FullDescription");
					this.OnFullDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDate", DbType="Date NOT NULL")]
		public System.DateTime DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this.OnDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDate = value;
					this.SendPropertyChanged("DeliveryDate");
					this.OnDeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxUsers", DbType="Int NOT NULL")]
		public int MaxUsers
		{
			get
			{
				return this._MaxUsers;
			}
			set
			{
				if ((this._MaxUsers != value))
				{
					this.OnMaxUsersChanging(value);
					this.SendPropertyChanging();
					this._MaxUsers = value;
					this.SendPropertyChanged("MaxUsers");
					this.OnMaxUsersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Finalized", DbType="Bit NOT NULL")]
		public bool Finalized
		{
			get
			{
				return this._Finalized;
			}
			set
			{
				if ((this._Finalized != value))
				{
					this.OnFinalizedChanging(value);
					this.SendPropertyChanging();
					this._Finalized = value;
					this.SendPropertyChanged("Finalized");
					this.OnFinalizedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Open]", Storage="_Open", DbType="Bit NOT NULL")]
		public bool Open
		{
			get
			{
				return this._Open;
			}
			set
			{
				if ((this._Open != value))
				{
					this.OnOpenChanging(value);
					this.SendPropertyChanging();
					this._Open = value;
					this.SendPropertyChanged("Open");
					this.OnOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GithubURL", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string GithubURL
		{
			get
			{
				return this._GithubURL;
			}
			set
			{
				if ((this._GithubURL != value))
				{
					this.OnGithubURLChanging(value);
					this.SendPropertyChanging();
					this._GithubURL = value;
					this.SendPropertyChanged("GithubURL");
					this.OnGithubURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropietaryId", DbType="Int NOT NULL")]
		public int PropietaryId
		{
			get
			{
				return this._PropietaryId;
			}
			set
			{
				if ((this._PropietaryId != value))
				{
					this.OnPropietaryIdChanging(value);
					this.SendPropertyChanging();
					this._PropietaryId = value;
					this.SendPropertyChanged("PropietaryId");
					this.OnPropietaryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mainlanguage", DbType="Int NOT NULL")]
		public int Mainlanguage
		{
			get
			{
				return this._Mainlanguage;
			}
			set
			{
				if ((this._Mainlanguage != value))
				{
					if (this._ProgrammingLanguage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainlanguageChanging(value);
					this.SendPropertyChanging();
					this._Mainlanguage = value;
					this.SendPropertyChanged("Mainlanguage");
					this.OnMainlanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondaryLanguage", DbType="Int")]
		public System.Nullable<int> SecondaryLanguage
		{
			get
			{
				return this._SecondaryLanguage;
			}
			set
			{
				if ((this._SecondaryLanguage != value))
				{
					if (this._ProgrammingLanguage1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSecondaryLanguageChanging(value);
					this.SendPropertyChanging();
					this._SecondaryLanguage = value;
					this.SendPropertyChanged("SecondaryLanguage");
					this.OnSecondaryLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTypeFK", DbType="Int NOT NULL")]
		public int ProjectTypeFK
		{
			get
			{
				return this._ProjectTypeFK;
			}
			set
			{
				if ((this._ProjectTypeFK != value))
				{
					if (this._ProjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectTypeFKChanging(value);
					this.SendPropertyChanging();
					this._ProjectTypeFK = value;
					this.SendPropertyChanged("ProjectTypeFK");
					this.OnProjectTypeFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectCategoryFK", DbType="Int NOT NULL")]
		public int ProjectCategoryFK
		{
			get
			{
				return this._ProjectCategoryFK;
			}
			set
			{
				if ((this._ProjectCategoryFK != value))
				{
					if (this._ProjectCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectCategoryFKChanging(value);
					this.SendPropertyChanging();
					this._ProjectCategoryFK = value;
					this.SendPropertyChanged("ProjectCategoryFK");
					this.OnProjectCategoryFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommunicationMethod", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CommunicationMethod
		{
			get
			{
				return this._CommunicationMethod;
			}
			set
			{
				if ((this._CommunicationMethod != value))
				{
					this.OnCommunicationMethodChanging(value);
					this.SendPropertyChanging();
					this._CommunicationMethod = value;
					this.SendPropertyChanged("CommunicationMethod");
					this.OnCommunicationMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_UserLikesProject", Storage="_UserLikesProject", ThisKey="ProjectId", OtherKey="ProjectFK")]
		public EntitySet<UserLikesProject> UserLikesProject
		{
			get
			{
				return this._UserLikesProject;
			}
			set
			{
				this._UserLikesProject.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_UserParticipatesProject", Storage="_UserParticipatesProject", ThisKey="ProjectId", OtherKey="ProjectFK")]
		public EntitySet<UserParticipatesProject> UserParticipatesProject
		{
			get
			{
				return this._UserParticipatesProject;
			}
			set
			{
				this._UserParticipatesProject.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_UserReviewsProject", Storage="_UserReviewsProject", ThisKey="ProjectId", OtherKey="ProjectFK")]
		public EntitySet<UserReviewsProject> UserReviewsProject
		{
			get
			{
				return this._UserReviewsProject;
			}
			set
			{
				this._UserReviewsProject.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgrammingLanguage_Project", Storage="_ProgrammingLanguage", ThisKey="Mainlanguage", OtherKey="LanguageId", IsForeignKey=true)]
		public ProgrammingLanguage ProgrammingLanguage
		{
			get
			{
				return this._ProgrammingLanguage.Entity;
			}
			set
			{
				ProgrammingLanguage previousValue = this._ProgrammingLanguage.Entity;
				if (((previousValue != value) 
							|| (this._ProgrammingLanguage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgrammingLanguage.Entity = null;
						previousValue.Project.Remove(this);
					}
					this._ProgrammingLanguage.Entity = value;
					if ((value != null))
					{
						value.Project.Add(this);
						this._Mainlanguage = value.LanguageId;
					}
					else
					{
						this._Mainlanguage = default(int);
					}
					this.SendPropertyChanged("ProgrammingLanguage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgrammingLanguage_Project1", Storage="_ProgrammingLanguage1", ThisKey="SecondaryLanguage", OtherKey="LanguageId", IsForeignKey=true)]
		public ProgrammingLanguage ProgrammingLanguage1
		{
			get
			{
				return this._ProgrammingLanguage1.Entity;
			}
			set
			{
				ProgrammingLanguage previousValue = this._ProgrammingLanguage1.Entity;
				if (((previousValue != value) 
							|| (this._ProgrammingLanguage1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgrammingLanguage1.Entity = null;
						previousValue.Project1.Remove(this);
					}
					this._ProgrammingLanguage1.Entity = value;
					if ((value != null))
					{
						value.Project1.Add(this);
						this._SecondaryLanguage = value.LanguageId;
					}
					else
					{
						this._SecondaryLanguage = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProgrammingLanguage1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectCategory_Project", Storage="_ProjectCategory", ThisKey="ProjectCategoryFK", OtherKey="CategoryId", IsForeignKey=true)]
		public ProjectCategory ProjectCategory
		{
			get
			{
				return this._ProjectCategory.Entity;
			}
			set
			{
				ProjectCategory previousValue = this._ProjectCategory.Entity;
				if (((previousValue != value) 
							|| (this._ProjectCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectCategory.Entity = null;
						previousValue.Project.Remove(this);
					}
					this._ProjectCategory.Entity = value;
					if ((value != null))
					{
						value.Project.Add(this);
						this._ProjectCategoryFK = value.CategoryId;
					}
					else
					{
						this._ProjectCategoryFK = default(int);
					}
					this.SendPropertyChanged("ProjectCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectType_Project", Storage="_ProjectType", ThisKey="ProjectTypeFK", OtherKey="ProjectTypeId", IsForeignKey=true)]
		public ProjectType ProjectType
		{
			get
			{
				return this._ProjectType.Entity;
			}
			set
			{
				ProjectType previousValue = this._ProjectType.Entity;
				if (((previousValue != value) 
							|| (this._ProjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjectType.Entity = null;
						previousValue.Project.Remove(this);
					}
					this._ProjectType.Entity = value;
					if ((value != null))
					{
						value.Project.Add(this);
						this._ProjectTypeFK = value.ProjectTypeId;
					}
					else
					{
						this._ProjectTypeFK = default(int);
					}
					this.SendPropertyChanged("ProjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserLikesProject(UserLikesProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UserLikesProject(UserLikesProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_UserParticipatesProject(UserParticipatesProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UserParticipatesProject(UserParticipatesProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_UserReviewsProject(UserReviewsProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UserReviewsProject(UserReviewsProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectCategory")]
	public partial class ProjectCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _CategoryName;
		
		private EntitySet<Project> _Project;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public ProjectCategory()
		{
			this._Project = new EntitySet<Project>(new Action<Project>(this.attach_Project), new Action<Project>(this.detach_Project));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(40)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectCategory_Project", Storage="_Project", ThisKey="CategoryId", OtherKey="ProjectCategoryFK")]
		public EntitySet<Project> Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				this._Project.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectCategory = this;
		}
		
		private void detach_Project(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectType")]
	public partial class ProjectType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectTypeId;
		
		private string _ProjectTypeName;
		
		private EntitySet<Project> _Project;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectTypeIdChanging(int value);
    partial void OnProjectTypeIdChanged();
    partial void OnProjectTypeNameChanging(string value);
    partial void OnProjectTypeNameChanged();
    #endregion
		
		public ProjectType()
		{
			this._Project = new EntitySet<Project>(new Action<Project>(this.attach_Project), new Action<Project>(this.detach_Project));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectTypeId
		{
			get
			{
				return this._ProjectTypeId;
			}
			set
			{
				if ((this._ProjectTypeId != value))
				{
					this.OnProjectTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectTypeId = value;
					this.SendPropertyChanged("ProjectTypeId");
					this.OnProjectTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTypeName", DbType="VarChar(20)")]
		public string ProjectTypeName
		{
			get
			{
				return this._ProjectTypeName;
			}
			set
			{
				if ((this._ProjectTypeName != value))
				{
					this.OnProjectTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectTypeName = value;
					this.SendPropertyChanged("ProjectTypeName");
					this.OnProjectTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjectType_Project", Storage="_Project", ThisKey="ProjectTypeId", OtherKey="ProjectTypeFK")]
		public EntitySet<Project> Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				this._Project.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Project(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectType = this;
		}
		
		private void detach_Project(Project entity)
		{
			this.SendPropertyChanging();
			entity.ProjectType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Speciality")]
	public partial class Speciality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecialityId;
		
		private string _SpecialityName;
		
		private EntitySet<User> _User;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecialityIdChanging(int value);
    partial void OnSpecialityIdChanged();
    partial void OnSpecialityNameChanging(string value);
    partial void OnSpecialityNameChanged();
    #endregion
		
		public Speciality()
		{
			this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpecialityId
		{
			get
			{
				return this._SpecialityId;
			}
			set
			{
				if ((this._SpecialityId != value))
				{
					this.OnSpecialityIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityId = value;
					this.SendPropertyChanged("SpecialityId");
					this.OnSpecialityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityName", DbType="VarChar(30)")]
		public string SpecialityName
		{
			get
			{
				return this._SpecialityName;
			}
			set
			{
				if ((this._SpecialityName != value))
				{
					this.OnSpecialityNameChanging(value);
					this.SendPropertyChanging();
					this._SpecialityName = value;
					this.SendPropertyChanged("SpecialityName");
					this.OnSpecialityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_User", Storage="_User", ThisKey="SpecialityId", OtherKey="SpecialityFK")]
		public EntitySet<User> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = this;
		}
		
		private void detach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.Speciality = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _Password;
		
		private System.Data.Linq.Binary _ProfilePhoto;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private string _LinkedInURL;
		
		private string _GitHubURL;
		
		private System.Nullable<int> _SpecialityFK;
		
		private System.Nullable<int> _UserTypeFK;
		
		private System.Nullable<bool> _Privacy;
		
		private EntitySet<UserKnowsLanguage> _UserKnowsLanguage;
		
		private EntitySet<UserLikesProject> _UserLikesProject;
		
		private EntitySet<UserParticipatesProject> _UserParticipatesProject;
		
		private EntitySet<UserReviewsProject> _UserReviewsProject;
		
		private EntityRef<Speciality> _Speciality;
		
		private EntityRef<UserType> _UserType;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnProfilePhotoChanging(System.Data.Linq.Binary value);
    partial void OnProfilePhotoChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnLinkedInURLChanging(string value);
    partial void OnLinkedInURLChanged();
    partial void OnGitHubURLChanging(string value);
    partial void OnGitHubURLChanged();
    partial void OnSpecialityFKChanging(System.Nullable<int> value);
    partial void OnSpecialityFKChanged();
    partial void OnUserTypeFKChanging(System.Nullable<int> value);
    partial void OnUserTypeFKChanged();
    partial void OnPrivacyChanging(System.Nullable<bool> value);
    partial void OnPrivacyChanged();
    #endregion
		
		public User()
		{
			this._UserKnowsLanguage = new EntitySet<UserKnowsLanguage>(new Action<UserKnowsLanguage>(this.attach_UserKnowsLanguage), new Action<UserKnowsLanguage>(this.detach_UserKnowsLanguage));
			this._UserLikesProject = new EntitySet<UserLikesProject>(new Action<UserLikesProject>(this.attach_UserLikesProject), new Action<UserLikesProject>(this.detach_UserLikesProject));
			this._UserParticipatesProject = new EntitySet<UserParticipatesProject>(new Action<UserParticipatesProject>(this.attach_UserParticipatesProject), new Action<UserParticipatesProject>(this.detach_UserParticipatesProject));
			this._UserReviewsProject = new EntitySet<UserReviewsProject>(new Action<UserReviewsProject>(this.attach_UserReviewsProject), new Action<UserReviewsProject>(this.detach_UserReviewsProject));
			this._Speciality = default(EntityRef<Speciality>);
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilePhoto", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary ProfilePhoto
		{
			get
			{
				return this._ProfilePhoto;
			}
			set
			{
				if ((this._ProfilePhoto != value))
				{
					this.OnProfilePhotoChanging(value);
					this.SendPropertyChanging();
					this._ProfilePhoto = value;
					this.SendPropertyChanged("ProfilePhoto");
					this.OnProfilePhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(80)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(20)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkedInURL", DbType="VarChar(256)")]
		public string LinkedInURL
		{
			get
			{
				return this._LinkedInURL;
			}
			set
			{
				if ((this._LinkedInURL != value))
				{
					this.OnLinkedInURLChanging(value);
					this.SendPropertyChanging();
					this._LinkedInURL = value;
					this.SendPropertyChanged("LinkedInURL");
					this.OnLinkedInURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GitHubURL", DbType="VarChar(256)")]
		public string GitHubURL
		{
			get
			{
				return this._GitHubURL;
			}
			set
			{
				if ((this._GitHubURL != value))
				{
					this.OnGitHubURLChanging(value);
					this.SendPropertyChanging();
					this._GitHubURL = value;
					this.SendPropertyChanged("GitHubURL");
					this.OnGitHubURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityFK", DbType="Int")]
		public System.Nullable<int> SpecialityFK
		{
			get
			{
				return this._SpecialityFK;
			}
			set
			{
				if ((this._SpecialityFK != value))
				{
					if (this._Speciality.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityFKChanging(value);
					this.SendPropertyChanging();
					this._SpecialityFK = value;
					this.SendPropertyChanged("SpecialityFK");
					this.OnSpecialityFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeFK", DbType="Int")]
		public System.Nullable<int> UserTypeFK
		{
			get
			{
				return this._UserTypeFK;
			}
			set
			{
				if ((this._UserTypeFK != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeFKChanging(value);
					this.SendPropertyChanging();
					this._UserTypeFK = value;
					this.SendPropertyChanged("UserTypeFK");
					this.OnUserTypeFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Privacy", DbType="Bit")]
		public System.Nullable<bool> Privacy
		{
			get
			{
				return this._Privacy;
			}
			set
			{
				if ((this._Privacy != value))
				{
					this.OnPrivacyChanging(value);
					this.SendPropertyChanging();
					this._Privacy = value;
					this.SendPropertyChanged("Privacy");
					this.OnPrivacyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserKnowsLanguage", Storage="_UserKnowsLanguage", ThisKey="UserId", OtherKey="UserFK")]
		public EntitySet<UserKnowsLanguage> UserKnowsLanguage
		{
			get
			{
				return this._UserKnowsLanguage;
			}
			set
			{
				this._UserKnowsLanguage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLikesProject", Storage="_UserLikesProject", ThisKey="UserId", OtherKey="UserFK")]
		public EntitySet<UserLikesProject> UserLikesProject
		{
			get
			{
				return this._UserLikesProject;
			}
			set
			{
				this._UserLikesProject.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserParticipatesProject", Storage="_UserParticipatesProject", ThisKey="UserId", OtherKey="UserFK")]
		public EntitySet<UserParticipatesProject> UserParticipatesProject
		{
			get
			{
				return this._UserParticipatesProject;
			}
			set
			{
				this._UserParticipatesProject.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserReviewsProject", Storage="_UserReviewsProject", ThisKey="UserId", OtherKey="UserFK")]
		public EntitySet<UserReviewsProject> UserReviewsProject
		{
			get
			{
				return this._UserReviewsProject;
			}
			set
			{
				this._UserReviewsProject.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speciality_User", Storage="_Speciality", ThisKey="SpecialityFK", OtherKey="SpecialityId", IsForeignKey=true)]
		public Speciality Speciality
		{
			get
			{
				return this._Speciality.Entity;
			}
			set
			{
				Speciality previousValue = this._Speciality.Entity;
				if (((previousValue != value) 
							|| (this._Speciality.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speciality.Entity = null;
						previousValue.User.Remove(this);
					}
					this._Speciality.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._SpecialityFK = value.SpecialityId;
					}
					else
					{
						this._SpecialityFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Speciality");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_UserType", ThisKey="UserTypeFK", OtherKey="UserTypeId", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.User.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._UserTypeFK = value.UserTypeId;
					}
					else
					{
						this._UserTypeFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserKnowsLanguage(UserKnowsLanguage entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserKnowsLanguage(UserKnowsLanguage entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserLikesProject(UserLikesProject entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserLikesProject(UserLikesProject entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserParticipatesProject(UserParticipatesProject entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserParticipatesProject(UserParticipatesProject entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserReviewsProject(UserReviewsProject entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserReviewsProject(UserReviewsProject entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserKnowsLanguage")]
	public partial class UserKnowsLanguage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageUserRelationId;
		
		private System.Nullable<int> _UserFK;
		
		private System.Nullable<int> _LanguageFK;
		
		private EntityRef<ProgrammingLanguage> _ProgrammingLanguage;
		
		private EntityRef<User> _User;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageUserRelationIdChanging(int value);
    partial void OnLanguageUserRelationIdChanged();
    partial void OnUserFKChanging(System.Nullable<int> value);
    partial void OnUserFKChanged();
    partial void OnLanguageFKChanging(System.Nullable<int> value);
    partial void OnLanguageFKChanged();
    #endregion
		
		public UserKnowsLanguage()
		{
			this._ProgrammingLanguage = default(EntityRef<ProgrammingLanguage>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageUserRelationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LanguageUserRelationId
		{
			get
			{
				return this._LanguageUserRelationId;
			}
			set
			{
				if ((this._LanguageUserRelationId != value))
				{
					this.OnLanguageUserRelationIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageUserRelationId = value;
					this.SendPropertyChanged("LanguageUserRelationId");
					this.OnLanguageUserRelationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFK", DbType="Int")]
		public System.Nullable<int> UserFK
		{
			get
			{
				return this._UserFK;
			}
			set
			{
				if ((this._UserFK != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserFKChanging(value);
					this.SendPropertyChanging();
					this._UserFK = value;
					this.SendPropertyChanged("UserFK");
					this.OnUserFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageFK", DbType="Int")]
		public System.Nullable<int> LanguageFK
		{
			get
			{
				return this._LanguageFK;
			}
			set
			{
				if ((this._LanguageFK != value))
				{
					if (this._ProgrammingLanguage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageFKChanging(value);
					this.SendPropertyChanging();
					this._LanguageFK = value;
					this.SendPropertyChanged("LanguageFK");
					this.OnLanguageFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgrammingLanguage_UserKnowsLanguage", Storage="_ProgrammingLanguage", ThisKey="LanguageFK", OtherKey="LanguageId", IsForeignKey=true)]
		public ProgrammingLanguage ProgrammingLanguage
		{
			get
			{
				return this._ProgrammingLanguage.Entity;
			}
			set
			{
				ProgrammingLanguage previousValue = this._ProgrammingLanguage.Entity;
				if (((previousValue != value) 
							|| (this._ProgrammingLanguage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgrammingLanguage.Entity = null;
						previousValue.UserKnowsLanguage.Remove(this);
					}
					this._ProgrammingLanguage.Entity = value;
					if ((value != null))
					{
						value.UserKnowsLanguage.Add(this);
						this._LanguageFK = value.LanguageId;
					}
					else
					{
						this._LanguageFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProgrammingLanguage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserKnowsLanguage", Storage="_User", ThisKey="UserFK", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserKnowsLanguage.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserKnowsLanguage.Add(this);
						this._UserFK = value.UserId;
					}
					else
					{
						this._UserFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLikesProject")]
	public partial class UserLikesProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserProjectRelationId;
		
		private System.Nullable<int> _UserFK;
		
		private System.Nullable<int> _ProjectFK;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<User> _User;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserProjectRelationIdChanging(int value);
    partial void OnUserProjectRelationIdChanged();
    partial void OnUserFKChanging(System.Nullable<int> value);
    partial void OnUserFKChanged();
    partial void OnProjectFKChanging(System.Nullable<int> value);
    partial void OnProjectFKChanged();
    #endregion
		
		public UserLikesProject()
		{
			this._Project = default(EntityRef<Project>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserProjectRelationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserProjectRelationId
		{
			get
			{
				return this._UserProjectRelationId;
			}
			set
			{
				if ((this._UserProjectRelationId != value))
				{
					this.OnUserProjectRelationIdChanging(value);
					this.SendPropertyChanging();
					this._UserProjectRelationId = value;
					this.SendPropertyChanged("UserProjectRelationId");
					this.OnUserProjectRelationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFK", DbType="Int")]
		public System.Nullable<int> UserFK
		{
			get
			{
				return this._UserFK;
			}
			set
			{
				if ((this._UserFK != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserFKChanging(value);
					this.SendPropertyChanging();
					this._UserFK = value;
					this.SendPropertyChanged("UserFK");
					this.OnUserFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectFK", DbType="Int")]
		public System.Nullable<int> ProjectFK
		{
			get
			{
				return this._ProjectFK;
			}
			set
			{
				if ((this._ProjectFK != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectFKChanging(value);
					this.SendPropertyChanging();
					this._ProjectFK = value;
					this.SendPropertyChanged("ProjectFK");
					this.OnProjectFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_UserLikesProject", Storage="_Project", ThisKey="ProjectFK", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.UserLikesProject.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.UserLikesProject.Add(this);
						this._ProjectFK = value.ProjectId;
					}
					else
					{
						this._ProjectFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserLikesProject", Storage="_User", ThisKey="UserFK", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserLikesProject.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserLikesProject.Add(this);
						this._UserFK = value.UserId;
					}
					else
					{
						this._UserFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserParticipatesProject")]
	public partial class UserParticipatesProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectUserRelationId;
		
		private System.Nullable<int> _ProjectFK;
		
		private System.Nullable<int> _UserFK;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<User> _User;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectUserRelationIdChanging(int value);
    partial void OnProjectUserRelationIdChanged();
    partial void OnProjectFKChanging(System.Nullable<int> value);
    partial void OnProjectFKChanged();
    partial void OnUserFKChanging(System.Nullable<int> value);
    partial void OnUserFKChanged();
    #endregion
		
		public UserParticipatesProject()
		{
			this._Project = default(EntityRef<Project>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectUserRelationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjectUserRelationId
		{
			get
			{
				return this._ProjectUserRelationId;
			}
			set
			{
				if ((this._ProjectUserRelationId != value))
				{
					this.OnProjectUserRelationIdChanging(value);
					this.SendPropertyChanging();
					this._ProjectUserRelationId = value;
					this.SendPropertyChanged("ProjectUserRelationId");
					this.OnProjectUserRelationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectFK", DbType="Int")]
		public System.Nullable<int> ProjectFK
		{
			get
			{
				return this._ProjectFK;
			}
			set
			{
				if ((this._ProjectFK != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectFKChanging(value);
					this.SendPropertyChanging();
					this._ProjectFK = value;
					this.SendPropertyChanged("ProjectFK");
					this.OnProjectFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFK", DbType="Int")]
		public System.Nullable<int> UserFK
		{
			get
			{
				return this._UserFK;
			}
			set
			{
				if ((this._UserFK != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserFKChanging(value);
					this.SendPropertyChanging();
					this._UserFK = value;
					this.SendPropertyChanged("UserFK");
					this.OnUserFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_UserParticipatesProject", Storage="_Project", ThisKey="ProjectFK", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.UserParticipatesProject.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.UserParticipatesProject.Add(this);
						this._ProjectFK = value.ProjectId;
					}
					else
					{
						this._ProjectFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserParticipatesProject", Storage="_User", ThisKey="UserFK", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserParticipatesProject.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserParticipatesProject.Add(this);
						this._UserFK = value.UserId;
					}
					else
					{
						this._UserFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserReviewsProject")]
	public partial class UserReviewsProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserProjectRelationId;
		
		private string _ReviewText;
		
		private System.Nullable<decimal> _ProjectRating;
		
		private System.Nullable<int> _UserFK;
		
		private System.Nullable<int> _ProjectFK;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<User> _User;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserProjectRelationIdChanging(int value);
    partial void OnUserProjectRelationIdChanged();
    partial void OnReviewTextChanging(string value);
    partial void OnReviewTextChanged();
    partial void OnProjectRatingChanging(System.Nullable<decimal> value);
    partial void OnProjectRatingChanged();
    partial void OnUserFKChanging(System.Nullable<int> value);
    partial void OnUserFKChanged();
    partial void OnProjectFKChanging(System.Nullable<int> value);
    partial void OnProjectFKChanged();
    #endregion
		
		public UserReviewsProject()
		{
			this._Project = default(EntityRef<Project>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserProjectRelationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserProjectRelationId
		{
			get
			{
				return this._UserProjectRelationId;
			}
			set
			{
				if ((this._UserProjectRelationId != value))
				{
					this.OnUserProjectRelationIdChanging(value);
					this.SendPropertyChanging();
					this._UserProjectRelationId = value;
					this.SendPropertyChanged("UserProjectRelationId");
					this.OnUserProjectRelationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewText", DbType="VarChar(500)")]
		public string ReviewText
		{
			get
			{
				return this._ReviewText;
			}
			set
			{
				if ((this._ReviewText != value))
				{
					this.OnReviewTextChanging(value);
					this.SendPropertyChanging();
					this._ReviewText = value;
					this.SendPropertyChanged("ReviewText");
					this.OnReviewTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectRating", DbType="Decimal(3,2)")]
		public System.Nullable<decimal> ProjectRating
		{
			get
			{
				return this._ProjectRating;
			}
			set
			{
				if ((this._ProjectRating != value))
				{
					this.OnProjectRatingChanging(value);
					this.SendPropertyChanging();
					this._ProjectRating = value;
					this.SendPropertyChanged("ProjectRating");
					this.OnProjectRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFK", DbType="Int")]
		public System.Nullable<int> UserFK
		{
			get
			{
				return this._UserFK;
			}
			set
			{
				if ((this._UserFK != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserFKChanging(value);
					this.SendPropertyChanging();
					this._UserFK = value;
					this.SendPropertyChanged("UserFK");
					this.OnUserFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectFK", DbType="Int")]
		public System.Nullable<int> ProjectFK
		{
			get
			{
				return this._ProjectFK;
			}
			set
			{
				if ((this._ProjectFK != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectFKChanging(value);
					this.SendPropertyChanging();
					this._ProjectFK = value;
					this.SendPropertyChanged("ProjectFK");
					this.OnProjectFKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_UserReviewsProject", Storage="_Project", ThisKey="ProjectFK", OtherKey="ProjectId", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.UserReviewsProject.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.UserReviewsProject.Add(this);
						this._ProjectFK = value.ProjectId;
					}
					else
					{
						this._ProjectFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserReviewsProject", Storage="_User", ThisKey="UserFK", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserReviewsProject.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserReviewsProject.Add(this);
						this._UserFK = value.UserId;
					}
					else
					{
						this._UserFK = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
